// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã...");
ymaps.ready(init);

let myMap;
let clusterer;
let allCourts = []; // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—Ä—Ç–æ–≤

function init() {
    myMap = new ymaps.Map("map", {
        center: [55.751244, 37.618423], // –¶–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã
        zoom: 11,
        controls: ["zoomControl", "geolocationControl"]
    });

    clusterer = new ymaps.Clusterer({
        preset: 'islands#invertedBlueClusterIcons',
        groupByCoordinates: false
    });

    myMap.geoObjects.add(clusterer);

    // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ OpenStreetMap API
    fetch("https://overpass-api.de/api/interpreter?data=[out:json];node['leisure'='pitch']['sport'='tennis']['access'='public']['fee'='no'](55.5,37.3,56.0,38.0);out;")
        .then(response => response.json())
        .then(data => {
            allCourts = data.elements.map(el => ({
                name: el.tags.name || "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç",
                lat: el.lat,
                lon: el.lon,
                surface: el.tags.surface || "unknown", // –ü–æ–∫—Ä—ã—Ç–∏–µ
                lights: el.tags.lit === "yes",
                locker: el.tags.changing_rooms === "yes",
                info: el.tags.description || "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            }));

            addCourts(allCourts); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ç–æ–≤:", error));

    // ‚úÖ –ö–Ω–æ–ø–∫–∞ "üìç –ù–∞–π—Ç–∏ –º–µ–Ω—è"
    document.getElementById("location-btn").addEventListener("click", function() {
        ymaps.geolocation.get({
            provider: 'browser',
            mapStateAutoApply: true
        }).then(function(result) {
            myMap.geoObjects.add(result.geoObjects);
            myMap.setCenter(result.geoObjects.get(0).geometry.getCoordinates(), 14);
        });
    });

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById("surface-filter").addEventListener("change", applyFilters);
    document.getElementById("lights-filter").addEventListener("change", applyFilters);
    document.getElementById("locker-filter").addEventListener("change", applyFilters);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
function addCourts(courts) {
    clusterer.removeAll(); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏

    courts.forEach(court => {
        let placemark = new ymaps.Placemark([court.lat, court.lon], {
            balloonContent: `
                <b>${court.name}</b><br>
                –ü–æ–∫—Ä—ã—Ç–∏–µ: ${court.surface}<br>
                –û—Å–≤–µ—â–µ–Ω–∏–µ: ${court.lights ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –ù–µ—Ç"}<br>
                –†–∞–∑–¥–µ–≤–∞–ª–∫–∏: ${court.locker ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –ù–µ—Ç"}<br>
                <a href="court.html?name=${encodeURIComponent(court.name)}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
            `
        }, {
            preset: "islands#redIcon"
        });

        clusterer.add(placemark);
    });

    myMap.geoObjects.add(clusterer);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ç–æ–≤
function applyFilters() {
    let selectedSurface = document.getElementById("surface-filter").value;
    let filterLights = document.getElementById("lights-filter").checked;
    let filterLocker = document.getElementById("locker-filter").checked;

    let filteredCourts = allCourts.filter(court => {
        let matchesSurface = (selectedSurface === "all" || court.surface === selectedSurface);
        let matchesLights = (!filterLights || court.lights);
        let matchesLocker = (!filterLocker || court.locker);
        return matchesSurface && matchesLights && matchesLocker;
    });

    addCourts(filteredCourts); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏
}
