console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã...");
ymaps.ready(init);

let myMap;
let clusterer;
let allCourts = [];
const GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS6SpY-42Fp2lTrjUPLEXtkJogH1n7c_j-KaXMW9B19wnW9geukapdUSy6U0CJGhmDX6x_TnrjSNNIB/pub?output=csv"; // üîπ –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É
const YANDEX_API_KEY = "988640b3-d0cd-41b7-aaa9-52d0bb6423b6"; // üîπ –í—Å—Ç–∞–≤—å API-–∫–ª—é—á –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç

function init() {
    myMap = new ymaps.Map("map", {
        center: [55.751244, 37.618423], // –ú–æ—Å–∫–≤–∞
        zoom: 11,
        controls: ["zoomControl", "geolocationControl"]
    });

    clusterer = new ymaps.Clusterer({
        preset: 'islands#invertedBlueClusterIcons',
        groupByCoordinates: false
    });

    myMap.geoObjects.add(clusterer);

    console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...");
    loadCourtsFromGoogleSheets();
}

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
function loadCourtsFromGoogleSheets() {
    fetch(GOOGLE_SHEET_URL)
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            return response.text();
        })
        .then(csvText => {
            allCourts = parseCSV(csvText);
            findMissingCoordinates(allCourts).then(updatedCourts => {
                allCourts = updatedCourts;
                addCourts(allCourts);
            });
        })
        .catch(error => {
            console.error("üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
        });
}

// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
function parseCSV(csvText) {
    let rows = csvText.split("\n").map(row => row.split(","));
    let courts = [];

    for (let i = 1; i < rows.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (rows[i].length >= 5) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
            let [name, address, lat, lon, info] = rows[i];
            courts.push({
                name: name.trim(),
                address: address.trim(),
                lat: lat ? parseFloat(lat) : null,
                lon: lon ? parseFloat(lon) : null,
                info: info.trim()
            });
        } else {
            console.warn(`‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}, —Ç.–∫. –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
        }
    }
    return courts;
}

// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async function findMissingCoordinates(courts) {
    let updatedCourts = [];

    for (const court of courts) {
        if (court.lat === null || court.lon === null) {
            try {
                const coords = await getCoordinatesFromAddress(court.address);
                if (coords) {
                    court.lat = coords.lat;
                    court.lon = coords.lon;
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è ${court.address}: ${court.lat}, ${court.lon}`);
                } else {
                    console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${court.address}`);
                }
            } catch (error) {
                console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${court.address}`, error);
            }
        }
        updatedCourts.push(court);
    }
    return updatedCourts;
}

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
async function getCoordinatesFromAddress(address) {
    try {
        const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${YANDEX_API_KEY}&format=json&geocode=${encodeURIComponent(address)}`);
        const data = await response.json();
        if (data.response.GeoObjectCollection.featureMember.length > 0) {
            let coords = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(" ");
            return { lat: parseFloat(coords[1]), lon: parseFloat(coords[0]) };
        } else {
            return null;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å API", error);
        return null;
    }
}

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É
function addCourts(courts) {
    clusterer.removeAll();

    courts.forEach(court => {
        if (court.lat && court.lon && !isNaN(court.lat) && !isNaN(court.lon)) {
            let placemark = new ymaps.Placemark([court.lat, court.lon], {
                balloonContent: `
                    <b>${court.name}</b><br>
                    üìç ${court.address}<br>
                    ‚Ñπ ${court.info}<br>
                    <a href="court.html?name=${encodeURIComponent(court.name)}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                `
            }, {
                preset: "islands#redIcon"
            });

            clusterer.add(placemark);
        } else {
            console.warn(`‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${court.name}, —Ç.–∫. –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
        }
    });

    myMap.geoObjects.add(clusterer);
    console.log("‚úÖ –ö–æ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É!");
}

// ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìç –ù–∞–π—Ç–∏ –º–µ–Ω—è"
document.getElementById("location-btn").addEventListener("click", function () {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function (position) {
                const userLat = position.coords.latitude;
                const userLon = position.coords.longitude;

                myMap.setCenter([userLat, userLon], 15);

                const userPlacemark = new ymaps.Placemark([userLat, userLon], {
                    balloonContent: "–í—ã –∑–¥–µ—Å—å!"
                }, {
                    preset: "islands#blueCircleIcon"
                });

                myMap.geoObjects.add(userPlacemark);
                console.log("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userLat, userLon);
            },
            function (error) {
                console.error("üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error.message);
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.");
            }
        );
    } else {
        alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Geolocation API.");
    }
});
