console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã...");
ymaps.ready(init);

let myMap;
let clusterer;
let allCourts = [];
const YANDEX_API_KEY = "988640b3-d0cd-41b7-aaa9-52d0bb6423b6" // üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á

function init() {
    myMap = new ymaps.Map("map", {
        center: [55.751244, 37.618423], // –ú–æ—Å–∫–≤–∞
        zoom: 11,
        controls: ["zoomControl", "geolocationControl"]
    });

    clusterer = new ymaps.Clusterer({
        preset: 'islands#invertedBlueClusterIcons',
        groupByCoordinates: false
    });

    myMap.geoObjects.add(clusterer);

    console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä—Ç—ã –∏–∑ JSON...");

    fetch("courts.json")
        .then(response => response.json())
        .then(data => {
            allCourts = data;
            findMissingCoordinates(allCourts).then(updatedCourts => {
                allCourts = updatedCourts;
                addCourts(allCourts);
            });
        })
        .catch(error => console.error("üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ç–æ–≤:", error));

    document.getElementById("location-btn").addEventListener("click", function() {
        ymaps.geolocation.get({
            provider: 'browser',
            mapStateAutoApply: true
        }).then(function(result) {
            myMap.geoObjects.add(result.geoObjects);
            myMap.setCenter(result.geoObjects.get(0).geometry.getCoordinates(), 14);
        });
    });
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–æ—Ä—Ç–æ–≤ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async function findMissingCoordinates(courts) {
    let updatedCourts = [];

    for (const court of courts) {
        if (court.lat === null || court.lon === null) {
            try {
                const coords = await getCoordinatesFromAddress(court.address);
                if (coords) {
                    court.lat = coords.lat;
                    court.lon = coords.lon;
                } else {
                    console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${court.address}`);
                }
            } catch (error) {
                console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${court.address}`, error);
            }
        }
        updatedCourts.push(court);
    }
    return updatedCourts;
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
async function getCoordinatesFromAddress(address) {
    try {
        const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${YANDEX_API_KEY}&format=json&geocode=${encodeURIComponent(address)}`);
        const data = await response.json();
        if (data.response.GeoObjectCollection.featureMember.length > 0) {
            let coords = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(" ");
            return { lat: parseFloat(coords[1]), lon: parseFloat(coords[0]) };
        } else {
            return null;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å API", error);
        return null;
    }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
function addCourts(courts) {
    clusterer.removeAll();

    courts.forEach(court => {
        if (court.lat && court.lon) {
            let placemark = new ymaps.Placemark([court.lat, court.lon], {
                balloonContent: `
                    <b>${court.name}</b><br>
                    üìç ${court.address}<br>
                    ‚Ñπ ${court.info}<br>
                    <a href="court.html?name=${encodeURIComponent(court.name)}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                `
            }, {
                preset: "islands#redIcon"
            });

            clusterer.add(placemark);
        } else {
            console.warn(`‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${court.name}, —Ç.–∫. –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);
        }
    });

    myMap.geoObjects.add(clusterer);
    console.log("‚úÖ –ö–æ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É!");
}
